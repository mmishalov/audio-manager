<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 23.0.5">

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag LinearLayout"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\main_activity.xml"
            line="16"
            column="19"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag RelativeLayout"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\new_profile_activity.xml"
            line="13"
            column="21"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag RelativeLayout"
        category="Correctness"
        priority="6"
        summary="Detect XML attributes not using the Android namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="14"
            column="21"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="            android:targetSdkVersion=&quot;20&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 19"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\build.gradle"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            view = layoutInflater.inflate(R.layout.snippet_list_row, null);"
        errorLine2="                                                                     ~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\java\com\easysoft\auxmanager\activity\adapter\ApplicationAdapter.java"
            line="54"
            column="70"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.code.gson:gson than 1.7.2 is available: 2.2.4"
        category="Correctness"
        priority="4"
        summary="Looks for old or obsolete Gradle library dependencies"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.google.code.gson:gson:1.7.2&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\build.gradle"
            line="41"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This versionCode value (1) is not used; it is always overridden by the value specified in the Gradle build script (1)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.easysoft.auxmanager&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;>"
        errorLine2="                                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="2"
            column="104"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This versionName value (1.0) is not used; it is always overridden by the value specified in the Gradle build script (1.0)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.easysoft.auxmanager&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;>"
        errorLine2="                                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="2"
            column="128"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This minSdkVersion value (17) is not used; it is always overridden by the value specified in the Gradle build script (18)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="            android:minSdkVersion=&quot;17&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This targetSdkVersion value (20) is not used; it is always overridden by the value specified in the Gradle build script (19)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="            android:targetSdkVersion=&quot;20&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="PxUsage"
        severity="Warning"
        message="Avoid using &quot;px&quot; as units; use &quot;dp&quot; instead"
        category="Correctness"
        priority="2"
        summary="Looks for use of the `px` dimension"
        explanation="For performance reasons and to keep the code simpler, the Android system uses pixels as the standard unit for expressing dimension or coordinate values. That means that the dimensions of a view are always expressed in the code using pixels, but always based on the current screen density. For instance, if `myView.getWidth()` returns 10, the view is 10 pixels wide on the current screen, but on a device with a higher density screen, the value returned might be 15. If you use pixel values in your application code to work with bitmaps that are not pre-scaled for the current screen density, you might need to scale the pixel values that you use in your code to match the un-scaled bitmap source."
        url="http://developer.android.com/guide/practices/screens_support.html#screen-independence"
        urls="http://developer.android.com/guide/practices/screens_support.html#screen-independence"
        errorLine1="            android:layout_width=&quot;1024px&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\main_activity.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="PxUsage"
        severity="Warning"
        message="Avoid using &quot;px&quot; as units; use &quot;dp&quot; instead"
        category="Correctness"
        priority="2"
        summary="Looks for use of the `px` dimension"
        explanation="For performance reasons and to keep the code simpler, the Android system uses pixels as the standard unit for expressing dimension or coordinate values. That means that the dimensions of a view are always expressed in the code using pixels, but always based on the current screen density. For instance, if `myView.getWidth()` returns 10, the view is 10 pixels wide on the current screen, but on a device with a higher density screen, the value returned might be 15. If you use pixel values in your application code to work with bitmaps that are not pre-scaled for the current screen density, you might need to scale the pixel values that you use in your code to match the un-scaled bitmap source."
        url="http://developer.android.com/guide/practices/screens_support.html#screen-independence"
        urls="http://developer.android.com/guide/practices/screens_support.html#screen-independence"
        errorLine1="            android:layout_height=&quot;1024px&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\main_activity.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="Should explicitly set android:allowBackup to true or false (it&apos;s true by default, and that can have some security implications for the application&apos;s data)"
        category="Security"
        priority="3"
        summary="Ensure that allowBackup is explicitly set in the application&apos;s manifest"
        explanation="The allowBackup attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup

By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.

This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.

Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.

To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`"
        url="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        urls="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\AndroidManifest.xml"
            line="11"
            column="5"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable res/drawable/off.png in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Ensures that images are not defined in the density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable\off.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable res/drawable/on.png in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Ensures that images are not defined in the density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable\on.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-hdpi: ic_action_refresh.png, ic_action_remove.png"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable-hdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-mdpi: widget_off.png, widget_on.png"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable-mdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: ic_action_refresh.png, ic_action_remove.png, ic_stat_notify_runing.png, widget_off.png, widget_on.png"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xxhdpi: ic_action_delete.png, ic_action_edit.png, ic_action_new_w.png, ic_action_refresh.png, ic_action_remove.png... (3 more)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\drawable-xxhdpi"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define paddingLeft you should probably also define paddingRight for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Ensures that specifying padding on one side is matched by padding on the other"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                    android:paddingLeft=&quot;5dp&quot; >"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="23"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:layout_marginLeft with android:layout_marginStart=&quot;10dp&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;10dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\main_activity.xml"
            line="33"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:layout_marginLeft with android:layout_marginStart=&quot;10dp&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;10dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\main_activity.xml"
            line="42"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:layout_alignParentLeft with android:layout_alignParentStart=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_alignParentLeft=&quot;true&quot;/>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\new_profile_activity.xml"
            line="23"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:layout_alignParentRight with android:layout_alignParentEnd=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:layout_alignParentRight=&quot;true&quot;/>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\new_profile_activity.xml"
            line="28"
            column="19"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:paddingLeft with android:paddingStart=&quot;5dp&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    android:paddingLeft=&quot;5dp&quot; >"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="23"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;start&quot; instead of &quot;left&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                        android:gravity=&quot;left&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="29"
            column="25"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;start&quot; instead of &quot;left&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                        android:gravity=&quot;left&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="36"
            column="25"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:layout_alignParentRight with android:layout_alignParentEnd=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\snippet_list_row.xml"
            line="43"
            column="19"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:paddingLeft with android:paddingStart=&quot;5dp&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;5dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\spinner_item.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing android:paddingRight with android:paddingEnd=&quot;15dp&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingRight=&quot;15dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Development\mobile\AUXManager\AUXManager\src\main\res\layout\spinner_item.xml"
            line="9"
            column="5"/>
    </issue>

</issues>
